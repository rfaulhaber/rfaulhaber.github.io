<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ryan Faulhaber</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Ryan Faulhaber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 16:00:00 -0400</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>You Should Try Emacs</title>
      <link>/posts/try-emacs/</link>
      <pubDate>Mon, 13 Jul 2020 16:00:00 -0400</pubDate>
      
      <guid>/posts/try-emacs/</guid>
      <description>No, really, you should try Emacs. I gave it a shot a few months ago and now I&amp;rsquo;m hooked.
I know Emacs isn&amp;rsquo;t the most trendy thing these days, in fact it seems that VS Code is the new hotness. But Emacs deserves your attention.
Let me start by telling you how I arrived at Emacs: some time ago I used IntelliJ for work, almost exclusively. IntelliJ is great, honestly. You can do a lot without having to leave the editor, which I came to realize was something I wanted from an editor.</description>
    </item>
    
    <item>
      <title>A Guide to Promises in JavaScript</title>
      <link>/posts/js-promises/</link>
      <pubDate>Tue, 02 Jun 2020 14:00:00 -0400</pubDate>
      
      <guid>/posts/js-promises/</guid>
      <description>Although the async and await keywords are now part of standard JavaScript, under the hood they ultimately use Promises. Here we&amp;rsquo;ll explore what Promises are, why they&amp;rsquo;re needed, and how you can &amp;ldquo;promisify&amp;rdquo; callbacks in JavaScript.
I find a lot of newcomers are often confused by terms like &amp;ldquo;callbacks&amp;rdquo;, &amp;ldquo;Promises&amp;rdquo;, and what exactly async and await do. I hope to clear that up with this article.
For the sake of clarity, this guide will use function syntax, and not arrow functions.</description>
    </item>
    
  </channel>
</rss>