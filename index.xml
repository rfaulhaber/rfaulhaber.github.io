<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About on Ryan Faulhaber</title><link>/</link><description>Recent content in About on Ryan Faulhaber</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Jun 2021 10:43:00 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Some notes on techno-pessimism</title><link>/posts/notes-on-techno-pessimism/</link><pubDate>Sun, 27 Jun 2021 10:43:00 -0400</pubDate><guid>/posts/notes-on-techno-pessimism/</guid><description>Recently I&amp;rsquo;ve become entralled by Emacs. Part of the reason why I think is because, among other reasons, Emacs represents a lost horizon for what a computer program could be.
Emacs is easy to customize (assuming you know Lisp, which anymore may be a big assumption), and in my experience, easier than Atom or VS Code. In fact, I feel that I can do more in ten lines of Lisp than I can do in 100 of a JavaScript extension for VS Code.</description></item><item><title>Cool Emacs Things: Dired</title><link>/posts/cool-emacs-dired/</link><pubDate>Fri, 28 May 2021 03:25:00 -0400</pubDate><guid>/posts/cool-emacs-dired/</guid><description>Today we continue my ongoing series on Emacs with a feature of Emacs that feels genuinely magical: Dired.
One of the first things I did when I became a Linux user was to learn how to use the terminal. The terminal is an indispensable tool in the Unix world broadly because of its versatility. I got to a point where I used the terminal so heavily that eventually on Linux I stopped installing file explorers, and on macOS I had entire directories that never had those annoying .</description></item><item><title>Quest for a Better Scripting Language</title><link>/posts/shell-quest/</link><pubDate>Tue, 27 Apr 2021 17:19:00 -0400</pubDate><guid>/posts/shell-quest/</guid><description>I&amp;rsquo;ve been a Linux user for quite a few years now, and writing shell scripts is a pretty common thing for me. I have written many little scripts to do repetitive tasks in various languages. In this post I want to think out loud about what makes a worthwhile scripting language.
Also please note that these are purely my opinions based on subjective experience, I&amp;rsquo;m not really interested in making any objective claims in this post.</description></item><item><title>My Advent of Code 2020 So Far</title><link>/posts/aoc-2020-so-far/</link><pubDate>Sun, 13 Dec 2020 14:53:00 -0500</pubDate><guid>/posts/aoc-2020-so-far/</guid><description>This is my first year participating in Advent of Code. I enjoy doing coding challenges but I&amp;rsquo;m not competitive about it, so I tend to use them as a learning opportunity. Like for most people, the end of the year is a time of reflection, and when I look back on what I wanted to do this year, I often found myself saying &amp;ldquo;that&amp;rsquo;s a language I wish I knew better.</description></item><item><title>Cool Emacs Things: Magit</title><link>/posts/cool-emacs-magit/</link><pubDate>Sat, 21 Nov 2020 15:46:00 -0500</pubDate><guid>/posts/cool-emacs-magit/</guid><description>This is part of an ongoing series where I talk about the little things that make Emacs a nice editor. Today&amp;rsquo;s entry: Magit, a Git interface for Emacs.
I&amp;rsquo;m not much of a Git client person myself. I don&amp;rsquo;t use or particularly like Sourcetree or GitKraken. VS Code and JetBrains IDEs have some nice features, especially when it comes to merging and rebasing, but they&amp;rsquo;re still not quite like Magit.</description></item><item><title>Critique of the Magic of Modern IDEs</title><link>/posts/critique-of-modern-ides/</link><pubDate>Sun, 15 Nov 2020 13:19:00 -0500</pubDate><guid>/posts/critique-of-modern-ides/</guid><description>The StackOverflow blog recently posted this article asking why so many people continue to use Vim and Emacs when modern editors like Atom exist. This is a question I have personally addressed before with regards to Emacs, but I want to address this post specifically because I think it gets at a commonly held misunderstanding about these editors.
The basic point of the post explores why people would want to use an antiquated editor like Vim or Emacs, and that those who continue to use either are missing out on the so-called magic of a newer IDE.</description></item><item><title>Some First Impressions of Nix</title><link>/posts/nix-first-impressions/</link><pubDate>Fri, 28 Aug 2020 22:06:00 -0400</pubDate><guid>/posts/nix-first-impressions/</guid><description>&lt;p>In my relatively few years of software development I&amp;rsquo;ve seen first hand how hard it can be to set up a consistent environment, development or otherwise, across a team, and I think Nix might be a solution.&lt;/p></description></item><item><title>Cool Emacs Things: Edit Files Over SSH</title><link>/posts/cool-emacs-tramp/</link><pubDate>Sat, 22 Aug 2020 14:43:00 -0400</pubDate><guid>/posts/cool-emacs-tramp/</guid><description>This is the first installment of an indefinite series calling (in lieu of a better name) &amp;ldquo;Cool Emacs Things,&amp;rdquo; little things about Emacs that makes it a very handy editor.
Today&amp;rsquo;s entry: Editing files over SSH.
This was something I discovered recently by accident. I run a private email server and the IMAP portion of the server is handled by Dovecot. Dovecot is great but by default the configuration is spread across dozens of files, and, while trying to tediously edit multiple files over SSH in Vim, I thought, &amp;ldquo;Wouldn&amp;rsquo;t it be nice if I could do this with Emacs?</description></item><item><title>Writing an Emacs module in Rust</title><link>/posts/first-emacs-module-rust/</link><pubDate>Fri, 14 Aug 2020 14:30:00 -0400</pubDate><guid>/posts/first-emacs-module-rust/</guid><description>&lt;p>Recently I learned that Emacs supports linking with dynamic modules, so I tried writing one in Rust.&lt;/p></description></item><item><title>You Should Try Linux</title><link>/posts/try-linux/</link><pubDate>Wed, 05 Aug 2020 21:51:00 -0400</pubDate><guid>/posts/try-linux/</guid><description>&lt;p>I&amp;rsquo;ve been using Linux since about 2013 and it&amp;rsquo;s been a consistently rewarding experience. Not only am I far more productive on Linux than I am on macOS or Windows, I have the satisfaction of using a system that&amp;rsquo;s uniquely mine.&lt;/p></description></item><item><title>Lessons Learned from Functional Programming</title><link>/posts/fp-lessons/</link><pubDate>Sun, 02 Aug 2020 14:41:00 -0400</pubDate><guid>/posts/fp-lessons/</guid><description>Learning about functional programming has changed the way I write and think about code. These are some ideas I&amp;rsquo;ve tried to import back into JavaScript.</description></item><item><title>Ways Emacs Has Changed What I Do</title><link>/posts/things-emacs-has-changed/</link><pubDate>Thu, 23 Jul 2020 22:58:00 -0400</pubDate><guid>/posts/things-emacs-has-changed/</guid><description>&lt;p>&lt;a href="https://ryanfaulhaber.com/posts/try-emacs/">Previously&lt;/a> I had written about trying Emacs, but looking back on that post I felt like I was bit vague about the ways in which it&amp;rsquo;s changed the things I do, so I wanted to provide some examples. Emacs has replaced a number of programs in my life, and not all of them are developer related.&lt;/p></description></item><item><title>You Should Try Emacs</title><link>/posts/try-emacs/</link><pubDate>Mon, 13 Jul 2020 16:00:00 -0400</pubDate><guid>/posts/try-emacs/</guid><description>&lt;p>No, really, you should try Emacs.&lt;/p></description></item><item><title>A Guide to Promises in JavaScript</title><link>/posts/js-promises/</link><pubDate>Tue, 02 Jun 2020 14:00:00 -0400</pubDate><guid>/posts/js-promises/</guid><description>Although the async and await keywords are now part of standard JavaScript, under the hood they ultimately use Promises. Here we&amp;rsquo;ll explore what Promises are, why they&amp;rsquo;re needed, and how you can &amp;ldquo;promisify&amp;rdquo; callbacks in JavaScript.
I find a lot of newcomers are often confused by terms like &amp;ldquo;callbacks&amp;rdquo;, &amp;ldquo;Promises&amp;rdquo;, and what exactly async and await do. I hope to clear that up with this article.
For the sake of clarity, this guide will use function syntax, and not arrow functions.</description></item><item><title>Ryan Faulhaber</title><link>/resume/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/resume/</guid><description/></item><item><title>Working With Me</title><link>/working/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/working/</guid><description>I am an experienced software developer focusing mostly on full-stack web and mobile development. I am available to work on new projects part-time.
Over the last few years of my professional life I&amp;rsquo;ve worked in full-stack web and mobile development, and I have a limited amount of systems programming via the Rust programming language. I&amp;rsquo;m experienced with all things JavaScript in particular.
I am most engaged in my work when I am able to work on complex problems with open-ended solutions.</description></item></channel></rss>